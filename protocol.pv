channel c.

(* A and B identities *)
const idA : bitstring.
const idB : bitstring.

(* Symmetric encryption *)
fun senc(bitstring, bitstring) : bitstring.
reduc forall m : bitstring, k : bitstring;
      sdec(senc(m, k), k) = m.

(* Asymmetric encryption *)
type skey.
type pkey.

fun pk(skey) : pkey.
fun aenc(bitstring, pkey) : bitstring.
reduc forall m : bitstring, k : skey;
      adec(aenc(m, pk(k)), k) = m.

(* Pair *)
fun pair(bitstring, bitstring) : bitstring.
reduc forall a : bitstring, b : bitstring;
      fst(pair(a, b)) = a.
reduc forall a : bitstring, b : bitstring;
      snd(pair(a, b)) = b.

(* Hash function *)
fun h(bitstring) : bitstring.


(* Events *)
event authentication(bitstring, bitstring).
event integrity(bitstring).


(* Queries *)
(* Authentication *)
query m : bitstring, nB : bitstring;
      event(authentication(m, nB)).
(* Integrity *)
query m : bitstring;
      event(integrity(m)).
(* Confidentiality *)
query attacker(new m).


(* Processes *)
let A(sk : skey, pkB : pkey, kS : bitstring) =
    let req = pair(aenc(idA, pkB), idB) in
    out(c, senc(req, kS));
    in(c, x : bitstring);
    let nB = adec(x, sk) in
    new m : bitstring;
    out(c, senc(m, nB));
    in(c, hash : bitstring);
    if hash = h(m) then
    event integrity(m).

let S(kA : bitstring, kB : bitstring) =
    in(c, x : bitstring);
    let req = sdec(x, kA) in
    if snd(req) = idB then
    out(c, senc(fst(req), kB)).

let B(sk : skey, pkA : pkey, kS : bitstring) =
    in(c, x : bitstring);
    let enc_idA = sdec(x, kS) in
    if adec(enc_idA, sk) = idA then
    new nB : bitstring;
    out(c, aenc(nB, pkA));
    in(c, y : bitstring);
    let m = sdec(y, nB) in
    event authentication(m, nB);
    out(c, h(m)).

process
    new skA : skey; new skB : skey;
    new kAS : bitstring; new kBS : bitstring;
    ( !(A(skA, pk(skB), kAS)) | !(S(kAS, kBS)) | !(B(skB, pk(skA), kBS)) )
